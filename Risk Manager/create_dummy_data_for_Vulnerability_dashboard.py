from elasticsearch import Elasticsearch
from datetime import datetime, timedelta
import random
import json

# ES_HOST = "10.254.4.84"
ES_HOST = "localhost"
ES_PORT = 9200
HOSTNAMES_AND_IPS = [
    ["rmep10", "10.253.12.60"],
    ["rmep11", "10.253.12.61"],
    ["rmep12", "10.253.12.62"],
    ["rmep13", "10.253.12.63"],
    ["rmep14", "10.253.12.64"],
    ["rmep15", "10.253.12.65"],
    ["rmep16", "10.253.12.66"],
    ["rmep17", "10.253.12.67"],
    ["rmep18", "10.253.12.68"],
    ["rmep19", "10.253.12.69"],
]


class VulnerabilityData:
    def __init__(self, indexName):
        self.indexName = indexName
        self.customId = 150
        self.es = Elasticsearch(hosts=[{"host": ES_HOST, "port": ES_PORT}])

    def __del__(self):
        self.es.close()

    def fetchIndexData(self):
        res = self.es.search(index="scan-vulnerability", size=200)
        print("Got %d Hits:" % res["hits"]["total"]["value"])
        return res

    def removeMetaAndCloneData(self, indexData):
        tempData = []
        for hit in indexData["hits"]["hits"]:
            # print(hit)
            record = hit["_source"]
            tempData.append(record)
        return tempData

    def writeToFile(clonedData):
        with open("scan.json", "w", encoding="utf-8") as f:
            json.dump(clonedData, f, ensure_ascii=False, indent=4)

    def collectData(self, clonedData):
        for hit in clonedData:
            if hit["scanner"][0] == "openvas":
                # writeToFile(hit)
                return hit

    def createNewDoc(self, master, hostname, timeObject):
        # changing creation_time and modification_time

        # changing hostname and ip
        master["hostname"] = hostname[0]
        master["ip"] = hostname[1]
        # master["id"]=customId
        self.customId = self.customId + 1
        newRuleResults = []  # New_RuleResult
        for i in range(random.choice(range(3, 10))):
            result = random.choice(master["openvas_report"]["rule_results"])
            result["modification_time"] = timeObject
            result["creation_time"] = timeObject
            newRuleResults.append(result)

        master["openvas_report"]["rule_results"] = newRuleResults

        # writeToFile(master)
        res = self.es.create("scan-reports", self.customId, master)
        print(res)

    def createDummyData(self):

        clonedData = []

        indexData = self.fetchIndexData()
        clonedData = self.removeMetaAndCloneData(indexData)
        # writeToFile(clonedData)
        # print(clonedData)
        # Update index records.
        # convertCVEStrToArrAndUpdate(indexData)
        master = self.collectData(clonedData)
        masterTime = master["openvas_report"]["rule_results"][0]["modification_time"]
        timeObject = datetime.strptime(masterTime, "%Y-%m-%dT%H:%M:%SZ")
        timeObject = timeObject - timedelta(
            days=5
        )  # To shift the data from 2nd feb to 29 jan

        for i in range(15):
            timeObject = timeObject - timedelta(
                days=1
            )  # changes the date of record to 1 day earlier
            timeHour = timeObject + timedelta(hours=5)  # add 5 hr to the time
            for element in HOSTNAMES_AND_IPS:
                if HOSTNAMES_AND_IPS.index(element) < 5:
                    self.createNewDoc(master, element, timeObject)
                else:
                    self.createNewDoc(master, element, timeHour)

    def createNewScanVulnerabilityDoc(self, clonedData, time, hostName, ip):

        stringTime = time.strftime("%Y-%m-%dT%H:%M:%SZ")
        # timeObject1 = datetime.strptime(time, "%Y-%m-%dT%H:%M:%SZ")
        newScanVulnerabilityDoc = random.choice(clonedData)
        epochTime = time.timestamp() * 1000.0
        for i in range(23):  #for creating 23 issues per host
            scanId = "scan-openvas-" + hostName + "-" + str(int(epochTime))
            newScanVulnerabilityDoc["Scan ID"] = scanId
            newScanVulnerabilityDoc["Creation Time"] = stringTime
            newScanVulnerabilityDoc["Timestamp"] = stringTime
            newScanVulnerabilityDoc["Test Start Time"] = stringTime
            newScanVulnerabilityDoc["Test End Time"] = stringTime
            newScanVulnerabilityDoc["IP"] = ip
            newScanVulnerabilityDoc["Hostname"] = hostName

            self.customId = self.customId + 1
            res = self.es.create(self.indexName, self.customId, newScanVulnerabilityDoc)

            print(res)
       

    def createScanVulnerabilityDummydata(self, startTime="2022-02-23T14:29:04Z"):

        clonedData = []
        indexData = self.fetchIndexData()
        clonedData = self.removeMetaAndCloneData(indexData)
        timeObject = datetime.strptime(startTime, "%Y-%m-%dT%H:%M:%SZ")

        for i in range(30):  # NumberOfDays=30
            for j in range(1, 6):  # 5 scans perday
                self.createNewScanVulnerabilityDoc(
                    clonedData,
                    timeObject + timedelta(hours=j),
                    HOSTNAMES_AND_IPS[j - 1][0],
                    HOSTNAMES_AND_IPS[j - 1][1],
                )
            timeObject = timeObject + timedelta(days=1)


if __name__ == "__main__":
    res = []
     
     # For creating Dummy data for "scan-reports index".
    # data = VulnerabilityData(indexName="scan-reports")
    # data.createDummyData()

    # For creating Dummy data for "sacn-vulnerability" index.
    data = VulnerabilityData(indexName="scan-vulnerability")

    data.createScanVulnerabilityDummydata(startTime="2022-01-01T14:29:04Z")

